---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template deploys a custom two-tier, three-AZ VPC.

Mappings:

  VPCMap:
    VPC:
      CIDR: 10.50.0.0/16
    PublicSubnetA:
      CIDR: 10.50.0.0/24
    PublicSubnetB:
      CIDR: 10.50.1.0/24
    PublicSubnetC:
      CIDR: 10.50.2.0/24
    PrivateSubnetA:
      CIDR: 10.50.64.0/19
    PrivateSubnetB:
      CIDR: 10.50.96.0/19
    PrivateSubnetC:
      CIDR: 10.50.128.0/19

Resources:

  # Create a Virtual Private Cloud

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ VPCMap, VPC, CIDR ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-VPC"

  # Create Private Subnets

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VPCMap, PublicSubnetA, CIDR ]
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnetA"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VPCMap, PublicSubnetB, CIDR ]
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnetB"

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VPCMap, PublicSubnetC, CIDR ]
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnetC"

# Create Private Subnets

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VPCMap, PrivateSubnetA, CIDR ]
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnetA"

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VPCMap, PrivateSubnetB, CIDR ]
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnetB"

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VPCMap, PrivateSubnetC, CIDR ]
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnetC"

# Create an Internet Gateway and a public Route Table

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicRouteTable"

  PublicRouteTableDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# Associate Route Tables and NACLs with Public Subnets

  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  PublicSubnetNetworkAclAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  PublicSubnetNetworkAclAssociationC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

# Create NAT Gateways with static IP addresses

  NatGatewayA:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIPA.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIPB.AllocationId
      SubnetId: !Ref PublicSubnetB

  NatGatewayC:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIPC.AllocationId
      SubnetId: !Ref PublicSubnetC

  NatEIPA:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEIPB:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEIPC:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

# Create default NAT routes for Private Subnets

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateRouteTableA"

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateRouteTableB"

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateRouteTableC"

  PrivateRouteTableNatRouteA:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateRouteTableNatRouteB:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateRouteTableNatRouteC:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC

  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  PrivateSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC

Outputs:

  Name:
    Description: Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcID"

  VpcCidr:
    Description: VPC CIDR Block
    Value: !FindInMap [ VPCMap, VPC, CIDR ]
    Export:
      Name: !Sub "${AWS::StackName}-VpcCidr"

  PublicSubnetA:
    Description: Public Subnet A ID
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetAID"

  PublicSubnetB:
    Description: Public Subnet B ID
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetBID"

  PublicSubnetC:
    Description: Public Subnet C ID
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetCID"

  PrivateSubnetA:
    Description: Private Subnet A ID
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetAID"

  PrivateSubnetB:
    Description: Private Subnet B ID
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetBID"

  PrivateSubnetC:
    Description: Private Subnet C ID
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetCID"
