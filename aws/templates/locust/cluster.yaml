---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template deploys an Elastic Beanstalk environment for an
  HTTP(S) load-testing stack based on Locust (https://locust.io/).

Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:

      - Label:
          default: Cluster Configuration
        Parameters:
          - ClusterInstanceCount
          - SshKeyPairName

      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - VpcCidr
          - PrivateSubnetA
          - PrivateSubnetB
          - PrivateSubnetC
          - PublicSubnetA
          - PublicSubnetB
          - PublicSubnetC

    ParameterLabels:

      ClusterInstanceCount:
        default: Number of EC2 instances in the cluster
      SshKeyPairName:
        default: Key Pair Name
      VpcId:
        default: VPC ID
      VpcCidr:
        default: VPC CIDR block
      PrivateSubnetA:
        default: Private Subnet in AZ A
      PrivateSubnetB:
        default: Private Subnet in AZ B
      PrivateSubnetC:
        default: Private Subnet in AZ C
      PublicSubnetA:
        default: Public Subnet in AZ A
      PublicSubnetB:
        default: Public Subnet in AZ B
      PublicSubnetC:
        default: Public Subnet in AZ C

Parameters:

  ClusterInstanceCount:
    Description: Size of the Locust cluster (number of EC2 instances)
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 3
    ConstraintDescription: Specify a number between 1 - 20

  SshKeyPairName:
    Description: Name of an existing EC2 Key Pair (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair)
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: SshKeyPairName must be specified

  VpcId:
    Description: ID of the existing VPC
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: VpcId must be specified

  VpcCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for the VPC
    Type: String

  PrivateSubnetA:
    Description: ID of an existing Private Subnet in AZ A
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: PrivateSubnetA must be specified

  PrivateSubnetB:
    Description: ID of an existing Private Subnet in AZ B
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: PrivateSubnetB must be specified

  PrivateSubnetC:
    Description: ID of an existing Private Subnet in AZ A\C
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: PrivateSubnetC must be specified

  PublicSubnetA:
    Description: ID of an existing Public Subnet in AZ A
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: PublicSubnetA must be specified

  PublicSubnetB:
    Description: ID of an existing Public Subnet in AZ B
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: PublicSubnetB must be specified

  PublicSubnetC:
    Description: ID of an existing Public Subnet in AZ C
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: PublicSubnetC must be specified

Mappings:

  EBMap:
    SolutionStack:
      # Note: Choose a Solution Stack with an nginx proxy, not httpd
      Name: 64bit Amazon Linux 2018.03 v2.11.4 running Go 1.12.6
    LaunchConfiguration:
      InstanceType: c5.large

Resources:

# -- Security Groups

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP ingress from the Internet to the load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-ELBSecurityGroup"

  ELBSecurityGroupToAppEgress:
    Type: AWS::EC2::SecurityGroupEgress  # Prevent circular references within Security Group
    Properties:
      GroupId: !Ref ELBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref EC2SecurityGroup

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP ingress from the Load Balancer to the Application Server
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref ELBSecurityGroup
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-EC2SecurityGroup"

  EC2SecurityGroupFromELBIngress:
    Type: AWS::EC2::SecurityGroupIngress  # Prevent circular references within Security Group
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref ELBSecurityGroup

  # -- Elastic Beanstalk

  ElasticBeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "elasticbeanstalk.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService

  Application:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Sub "${AWS::StackName}"

  Environment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref Application
      EnvironmentName: !Ref Application # Reuse Application name as Environment name
      TemplateName: !Ref ConfigurationTemplate
    DependsOn:
      - ConfigurationTemplate

  ConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref Application
      SolutionStackName: !FindInMap [ EBMap, SolutionStack, Name ]
      OptionSettings:

        # -- Elastic Beanstalk Environment

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: LoadBalancerType
        Value: application

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: ServiceRole
        Value: !Ref ElasticBeanstalkServiceRole

        # -- Elastic Beanstalk Auto Scaling

      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: !Ref ClusterInstanceCount

      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: !Ref ClusterInstanceCount

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SecurityGroups
        Value: !Ref EC2SecurityGroup

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: InstanceType
        Value: !FindInMap [ EBMap, LaunchConfiguration, InstanceType ]

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref EC2InstanceProfile

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value: !Ref SshKeyPairName

      # Allow SSH access from within the VPC
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SSHSourceRestriction
        Value:
          Fn::Sub:
            - tcp, 22, 22, ${SourceCIDR}
            - { SourceCIDR: !Ref VpcCidr }

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateEnabled
        Value: true

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateType
        Value: Health

      - Namespace: aws:autoscaling:trigger
        OptionName: MeasureName
        Value: CPUUtilization

      - Namespace: aws:autoscaling:trigger
        OptionName: Unit
        Value: Percent

      # Prevent Auto-Scaling
      - Namespace: aws:autoscaling:trigger
        OptionName: UpperThreshold
        Value: 100

      # Prevent Auto-Scaling
      - Namespace: aws:autoscaling:trigger
        OptionName: LowerThreshold
        Value: 0

      - Namespace: aws:autoscaling:trigger
        OptionName: BreachDuration
        Value: 1

      - Namespace: aws:autoscaling:trigger
        OptionName: Period
        Value: 1

        # -- Elastic Beanstalk Health Reporting

      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: "enhanced"

      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: "enhanced"

        # Note:
        #  * '60': enable metric ("check every 60s")
        #  * 'null': disable metric
      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: ConfigDocument
        Value:  '{
                  "Version": 1,
                  "CloudWatchMetrics": {
                    "Instance": {
                      "ApplicationLatencyP10": 60,
                      "ApplicationLatencyP50": 60,
                      "ApplicationLatencyP75": 60,
                      "ApplicationLatencyP85": 60,
                      "ApplicationLatencyP90": 60,
                      "ApplicationLatencyP95": 60,
                      "ApplicationLatencyP99": 60,
                      "ApplicationLatencyP99.9": 60,
                      "ApplicationRequests2xx": 60,
                      "ApplicationRequests3xx": 60,
                      "ApplicationRequests4xx": 60,
                      "ApplicationRequests5xx": 60,
                      "ApplicationRequestsTotal": 60,
                      "CPUIdle": 60,
                      "CPUIowait": 60,
                      "CPUIrq": 60,
                      "CPUNice": 60,
                      "CPUSoftirq": 60,
                      "CPUSystem": 60,
                      "CPUUser": 60,
                      "InstanceHealth": 60,
                      "LoadAverage1min": 60,
                      "LoadAverage5min": 60,
                      "RootFilesystemUtil": 60
                    },
                    "Environment": {
                      "ApplicationLatencyP10": 60,
                      "ApplicationLatencyP50": 60,
                      "ApplicationLatencyP75": 60,
                      "ApplicationLatencyP85": 60,
                      "ApplicationLatencyP90": 60,
                      "ApplicationLatencyP95": 60,
                      "ApplicationLatencyP99": 60,
                      "ApplicationLatencyP99.9": 60,
                      "ApplicationRequests2xx": 60,
                      "ApplicationRequests3xx": 60,
                      "ApplicationRequests4xx": 60,
                      "ApplicationRequests5xx": 60,
                      "ApplicationRequestsTotal": 60,
                      "InstancesDegraded": 60,
                      "InstancesInfo": 60,
                      "InstancesNoData": 60,
                      "InstancesOk": 60,
                      "InstancesPending": 60,
                      "InstancesSevere": 60,
                      "InstancesUnknown": 60,
                      "InstancesWarning": 60
                    }
                  },
                  "Rules": {
                    "Environment": {
                      "Application": {
                        "ApplicationRequests4xx": {
                          "Enabled": false
                        }
                      }
                    }
                  }
                }'

        # -- VPC

      - Namespace: aws:ec2:vpc
        OptionName: VpcId
        Value: !Ref VpcId

      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        Value:
          "Fn::Join":
          - ','
          - - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
            - !Ref PrivateSubnetC

      - Namespace: aws:ec2:vpc
        OptionName: ELBSubnets
        Value:
          "Fn::Join":
          - ','
          - - !Ref PublicSubnetA
            - !Ref PublicSubnetB
            - !Ref PublicSubnetC

      - Namespace: aws:elbv2:listener:default
        OptionName: ListenerEnabled
        Value: true

      - Namespace: aws:elbv2:loadbalancer
        OptionName: SecurityGroups
        Value: !Ref ELBSecurityGroup

      - Namespace: aws:elbv2:loadbalancer
        OptionName: ManagedSecurityGroup
        Value: !Ref ELBSecurityGroup

      - Namespace: aws:elbv2:listenerrule:default
        OptionName: PathPatterns
        Value: "/*"

        # -- CloudWatch Logs

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: StreamLogs
        Value: true

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: DeleteOnTerminate
        Value: true

        # -- Environment Variables

      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_REGION
        Value: !Ref AWS::Region

  # -- IAM

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  EC2Policies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: App
      Roles:
      - !Ref EC2Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: "*"
            Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref EC2Role

Outputs:

  Name:
    Description: Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  EnvironmentURL:
    Description: Environment URL
    Value: !GetAtt Environment.EndpointURL
    Export:
      Name: !Sub "${AWS::StackName}-EnvironmentURL"

  SolutionStackName:
    Description: Solution Stack Name
    Value: !FindInMap [ EBMap, SolutionStack, Name ]
    Export:
      Name: !Sub "${AWS::StackName}-SolutionStackName"

  ELBSecurityGroup:
    Description: Security Group ID for Internet-facing ELB
    Value: !GetAtt ELBSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-ELBSecurityGroupID"

  EC2SecurityGroup:
    Description: Security Group ID for app behind ELB
    Value: !GetAtt EC2SecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-EC2SecurityGroupID"
