---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Deploy an Elastic Beanstalk Environment for an HTTP(S) load-testing stack
  based on Locust (https://locust.io/).

Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - InstanceCount
          - InstanceTypes
          - EC2KeyName
          - ElasticBeanstalkSolutionStackName

      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - VpcCidr
          - PrivateSubnetIds
          - PublicSubnetIds

    ParameterLabels:
      InstanceCount:
        default: Number of EC2 instances in the cluster
      InstanceTypes:
        default: Instance Type of the EC2 instances in the cluster
      EC2KeyName:
        default: Key Pair Name
      ElasticBeanstalkSolutionStackName:
        default: Elastic Beanstalk Platform ("Solution Stack Name")
      VpcId:
        default: VPC ID
      VpcCidr:
        default: VPC CIDR block
      PrivateSubnetIds:
        default: Private Subnet IDs
      PublicSubnetIds:
        default: Public Subnet IDs

Parameters:

  InstanceCount:
    Description: Size of the Locust cluster (number of EC2 instances)
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 3
    ConstraintDescription: Specify a number between 1 - 20

  InstanceTypes:
    Description: Cluster Instance Types for Elastic Beanstalk to choose from
    Type: String
    Default: 'c5.large,c4.large'

  EC2KeyName:
    Description: Name of an existing EC2 Key Pair
    Type: String # 'String' allows an empty key name, while 'AWS::EC2::KeyPair::KeyName' does not
    Default: ''

  ElasticBeanstalkSolutionStackName:
    Description: Elastic Beanstalk Platform ("Solution Stack Name")
    Type: String

  VpcId:
    Description: ID of the existing VPC
    Type: AWS::EC2::VPC::Id

  VpcCidr:
    Description: CIDR block for the VPC
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  PrivateSubnetIds:
    Description: IDs of Private Subnets
    Type: List<AWS::EC2::Subnet::Id>

  PublicSubnetIds:
    Description: IDs of Public Subnets
    Type: List<AWS::EC2::Subnet::Id>

Resources:

# Security Groups

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}:LoadBalancerSecurityGroup"

  LoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref TargetSecurityGroup

  TargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Security Group
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}:TargetSecurityGroup"

  TargetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref TargetSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  TargetSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref TargetSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Elastic Beanstalk

  ElasticBeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - elasticbeanstalk.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService

  ElasticBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Sub "${AWS::StackName}"

  ElasticBeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      EnvironmentName: !Ref ElasticBeanstalkApplication # Reuse Application name as Environment name
      TemplateName: !Ref ElasticBeanstalkConfigurationTemplate

  ElasticBeanstalkConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      SolutionStackName: !Ref ElasticBeanstalkSolutionStackName
      OptionSettings:

      # Elastic Beanstalk Options, Environment

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: LoadBalancerType
        Value: application

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: ServiceRole
        Value: !Ref ElasticBeanstalkServiceRole

      # Elastic Beanstalk Options, Auto Scaling

      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: !Ref InstanceCount

      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: !Ref InstanceCount

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SecurityGroups
        Value: !Ref TargetSecurityGroup

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref ApplicationInstanceProfile

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value: !Ref EC2KeyName

      # Allow SSH access from within the VPC
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SSHSourceRestriction
        Value:
          Fn::Sub:
            - tcp, 22, 22, ${SourceCidr}
            - { SourceCidr: !Ref VpcCidr }

      - Namespace: aws:ec2:instances
        OptionName: InstanceTypes
        Value: !Ref InstanceTypes

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateEnabled
        Value: "true"

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateType
        Value: Health

      - Namespace: aws:autoscaling:trigger
        OptionName: MeasureName
        Value: CPUUtilization

      - Namespace: aws:autoscaling:trigger
        OptionName: Unit
        Value: Percent

      # Prevent Auto-Scaling
      - Namespace: aws:autoscaling:trigger
        OptionName: UpperThreshold
        Value: "100"

      - Namespace: aws:autoscaling:trigger
        OptionName: LowerThreshold
        Value: "0"

      - Namespace: aws:autoscaling:trigger
        OptionName: BreachDuration
        Value: "1"

      - Namespace: aws:autoscaling:trigger
        OptionName: Period
        Value: "1"

        # Elastic Beanstalk Options, Health Reporting

      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: "enhanced"

      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: "enhanced"

        # Note:
        #  * '60' = enable metric ("check every 60s")
        #  * 'null' = disable metric
      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: ConfigDocument
        Value:  '{
                  "Version": 1,
                  "CloudWatchMetrics": {
                    "Instance": {
                      "ApplicationLatencyP10": 60,
                      "ApplicationLatencyP50": 60,
                      "ApplicationLatencyP75": 60,
                      "ApplicationLatencyP85": 60,
                      "ApplicationLatencyP90": 60,
                      "ApplicationLatencyP95": 60,
                      "ApplicationLatencyP99": 60,
                      "ApplicationLatencyP99.9": 60,
                      "ApplicationRequests2xx": 60,
                      "ApplicationRequests3xx": 60,
                      "ApplicationRequests4xx": 60,
                      "ApplicationRequests5xx": 60,
                      "ApplicationRequestsTotal": 60,
                      "CPUIdle": 60,
                      "CPUIowait": 60,
                      "CPUIrq": 60,
                      "CPUNice": 60,
                      "CPUSoftirq": 60,
                      "CPUSystem": 60,
                      "CPUUser": 60,
                      "InstanceHealth": 60,
                      "LoadAverage1min": 60,
                      "LoadAverage5min": 60,
                      "RootFilesystemUtil": 60
                    },
                    "Environment": {
                      "ApplicationLatencyP10": 60,
                      "ApplicationLatencyP50": 60,
                      "ApplicationLatencyP75": 60,
                      "ApplicationLatencyP85": 60,
                      "ApplicationLatencyP90": 60,
                      "ApplicationLatencyP95": 60,
                      "ApplicationLatencyP99": 60,
                      "ApplicationLatencyP99.9": 60,
                      "ApplicationRequests2xx": 60,
                      "ApplicationRequests3xx": 60,
                      "ApplicationRequests4xx": 60,
                      "ApplicationRequests5xx": 60,
                      "ApplicationRequestsTotal": 60,
                      "InstancesDegraded": 60,
                      "InstancesInfo": 60,
                      "InstancesNoData": 60,
                      "InstancesOk": 60,
                      "InstancesPending": 60,
                      "InstancesSevere": 60,
                      "InstancesUnknown": 60,
                      "InstancesWarning": 60
                    }
                  },
                  "Rules": {
                    "Environment": {
                      "Application": {
                        "ApplicationRequests4xx": {
                          "Enabled": false
                        }
                      }
                    }
                  }
                }'

        # Elastic Beanstalk Options, VPC

      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value: !Ref VpcId

      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        # Workaround: List<> is not supported, generate a comma-separated String instead
        Value:
          "Fn::Join":
            - ','
            - - !Select [0, !Ref PrivateSubnetIds]
              - !Select [1, !Ref PrivateSubnetIds]
              - !Select [2, !Ref PrivateSubnetIds]

      - Namespace: aws:ec2:vpc
        OptionName: ELBSubnets
        # Workaround: List<> is not supported, generate a comma-separated String instead
        Value:
          "Fn::Join":
            - ','
            - - !Select [0, !Ref PublicSubnetIds]
              - !Select [1, !Ref PublicSubnetIds]
              - !Select [2, !Ref PublicSubnetIds]

      - Namespace: aws:elbv2:listener:default
        OptionName: ListenerEnabled
        Value: "true"

      - Namespace: aws:elbv2:loadbalancer
        OptionName: SecurityGroups
        Value: !Ref LoadBalancerSecurityGroup

      - Namespace: aws:elbv2:loadbalancer
        OptionName: ManagedSecurityGroup
        Value: !Ref LoadBalancerSecurityGroup

      - Namespace: aws:elbv2:listenerrule:default
        OptionName: PathPatterns
        Value: "/*"

        # Elastic Beanstalk Options, CloudWatch Logs

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: StreamLogs
        Value: "true"

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: DeleteOnTerminate
        Value: "true"

        # Elastic Beanstalk Options, Environment Variables

      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_REGION
        Value: !Ref AWS::Region

  # IAM

  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  ApplicationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: App
      Roles:
      - !Ref ApplicationRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: "*"
            Resource: "*"

  ApplicationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref ApplicationRole

Outputs:

  Name:
    Description: Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}:Name

  EnvironmentUrl:
    Description: Environment URL
    Value: !GetAtt ElasticBeanstalkEnvironment.EndpointURL
    Export:
      Name: !Sub "${AWS::StackName}:EnvironmentUrl"

  LoadBalancerSecurityGroupId:
    Description: Security Group ID applied to Internet-facing Load Balancer
    Value: !GetAtt LoadBalancerSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}:LoadBalancerSecurityGroupId"

  TargetSecurityGroupId:
    Description: Security Group ID applied to Targets of the Load Balancer
    Value: !GetAtt TargetSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}:TargetSecurityGroupId"

  ElasticBeanstalkSolutionStackName:
    Description: Elastic Beanstalk Platform ("Solution Stack Name")
    Value: !Ref ElasticBeanstalkSolutionStackName
    Export:
      Name: !Sub "${AWS::StackName}:ElasticBeanstalkSolutionStackName"
