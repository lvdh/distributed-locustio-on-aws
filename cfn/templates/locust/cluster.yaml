---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Locust Cluster, Elastic Beanstalk

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - InstanceCount
          - InstanceTypes
          - EC2KeyName
          - ElasticBeanstalkPlatform
      - Label:
          default: Network Configuration
        Parameters:
          - AzCount
          - VpcId
          - VpcCidrBlock
          - PrivateSubnetIds
          - PublicSubnetIds
    ParameterLabels:
      InstanceCount:
        default: Number of EC2 instances to provision for the cluster
      InstanceTypes:
        default: Instance Type of the EC2 instances provisioned for the cluster
      EC2KeyName:
        default: Name of an existing EC2 Key Pair
      ElasticBeanstalkPlatform:
        default: Name of a specific Elastic Beanstalk Platform/Solution Stack
      AzCount:
        default: Number of AZs to deploy across
      VpcId:
        default: ID of the existing VPC to deploy to
      VpcCidrBlock:
        default: CIDR block of the existing VPC to deploy to
      PrivateSubnetIds:
        default: Comma-delimited list of Private Subnet IDs
      PublicSubnetIds:
        default: Comma-delimited list of Public Subnet IDs

Parameters:

  AzCount:
    Description: Number of AZs to deploy across.
    Type: Number
    Default: 2
    AllowedValues:
      - 2
      - 3

  InstanceCount:
    Description: Number of EC2 instances to provision for the cluster.
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 3
    ConstraintDescription: Specify a number between 1 - 20

  InstanceTypes:
    Description: Instance Type of the EC2 instances provisioned for the cluster
    Type: String
    Default: 'c5.large,c4.large'

  EC2KeyName:
    Description: Name of an existing EC2 Key Pair
    Type: String # 'String' allows an empty key name, while 'AWS::EC2::KeyPair::KeyName' does not
    Default: ''

  ElasticBeanstalkPlatform:
    Description: Name of a specific Elastic Beanstalk Platform/Solution Stack
    Type: String

  VpcId:
    Description: ID of the existing VPC to deploy to
    Type: AWS::EC2::VPC::Id

  VpcCidrBlock:
    Description: CIDR block of the existing VPC to deploy to
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

  PrivateSubnetIds:
    Description: Comma-delimited list of Private Subnet IDs
    Type: CommaDelimitedList

  PublicSubnetIds:
    Description: Comma-delimited list of Public Subnet IDs
    Type: CommaDelimitedList

Conditions:

  SingleAz: !Or
    - !Equals [1, !Ref AzCount]
    - !Equals [2, !Ref AzCount]
    - !Equals [3, !Ref AzCount]

  DoubleAz: !Or
    - !Equals [2, !Ref AzCount]
    - !Equals [3, !Ref AzCount]

  TripleAz: !Equals [3, !Ref AzCount]

Resources:

  # IAM

  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceProfileRole

# Security Groups

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group (managed by CloudFormation)
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}:LoadBalancerSecurityGroup"

  LoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HTTP all (managed by CloudFormation)
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: HTTP TargetSecurityGroup (managed by CloudFormation)
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref TargetSecurityGroup

  TargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Security Group (managed by CloudFormation)
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}:TargetSecurityGroup"

  TargetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HTTP LoadBalancerSecurityGroup (managed by CloudFormation)
      GroupId: !Ref TargetSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  TargetSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: HTTP LoadBalancerSecurityGroup (managed by CloudFormation)
      GroupId: !Ref TargetSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Elastic Beanstalk

  EbServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - elasticbeanstalk.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService

  EbApplication:
    Type: AWS::ElasticBeanstalk::Application

  EbEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref EbApplication
      TemplateName: !Ref EbConfigurationTemplate

  EbConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref EbApplication
      SolutionStackName: !Ref ElasticBeanstalkPlatform
      OptionSettings:

      # Elastic Beanstalk Options, Environment

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: LoadBalancerType
        Value: application

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: ServiceRole
        Value: !Ref EbServiceRole

      # Elastic Beanstalk Options, EC2 Instance Types

      - Namespace: aws:ec2:instances
        OptionName: InstanceTypes
        Value: !Ref InstanceTypes

      # Elastic Beanstalk Options, Auto Scaling

      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: !Ref InstanceCount

      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: !Ref InstanceCount

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SecurityGroups
        Value: !Ref TargetSecurityGroup

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref InstanceProfile

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value: !Ref EC2KeyName

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SSHSourceRestriction
        Value:
          Fn::Sub:
            - tcp, 22, 22, ${SourceCidr}
            - { SourceCidr: !Ref VpcCidrBlock } # !Ref VpcCidrBlock = Allow SSH access from within the VPC

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateEnabled
        Value: "true"

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateType
        Value: Health

      - Namespace: aws:autoscaling:trigger
        OptionName: MeasureName
        Value: CPUUtilization

      - Namespace: aws:autoscaling:trigger
        OptionName: Unit
        Value: Percent

      - Namespace: aws:autoscaling:trigger
        OptionName: UpperThreshold
        Value: "100" # 100 = Prevent Auto-Scaling

      - Namespace: aws:autoscaling:trigger
        OptionName: LowerThreshold
        Value: "0"

      - Namespace: aws:autoscaling:trigger
        OptionName: BreachDuration
        Value: "1"

      - Namespace: aws:autoscaling:trigger
        OptionName: Period
        Value: "1"

      # Elastic Beanstalk Options, Health Reporting

      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: "enhanced"

      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: "enhanced"

      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: ConfigDocument
        # Note on Value format:
        #  * '60' = enable metric ("check every 60s")
        #  * 'null' = disable metric
        Value:  '{
                  "Version": 1,
                  "CloudWatchMetrics": {
                    "Instance": {
                      "ApplicationLatencyP10": 60,
                      "ApplicationLatencyP50": 60,
                      "ApplicationLatencyP75": 60,
                      "ApplicationLatencyP85": 60,
                      "ApplicationLatencyP90": 60,
                      "ApplicationLatencyP95": 60,
                      "ApplicationLatencyP99": 60,
                      "ApplicationLatencyP99.9": 60,
                      "ApplicationRequests2xx": 60,
                      "ApplicationRequests3xx": 60,
                      "ApplicationRequests4xx": 60,
                      "ApplicationRequests5xx": 60,
                      "ApplicationRequestsTotal": 60,
                      "CPUIdle": 60,
                      "CPUIowait": 60,
                      "CPUIrq": 60,
                      "CPUNice": 60,
                      "CPUSoftirq": 60,
                      "CPUSystem": 60,
                      "CPUUser": 60,
                      "InstanceHealth": 60,
                      "LoadAverage1min": 60,
                      "LoadAverage5min": 60,
                      "RootFilesystemUtil": 60
                    },
                    "Environment": {
                      "ApplicationLatencyP10": 60,
                      "ApplicationLatencyP50": 60,
                      "ApplicationLatencyP75": 60,
                      "ApplicationLatencyP85": 60,
                      "ApplicationLatencyP90": 60,
                      "ApplicationLatencyP95": 60,
                      "ApplicationLatencyP99": 60,
                      "ApplicationLatencyP99.9": 60,
                      "ApplicationRequests2xx": 60,
                      "ApplicationRequests3xx": 60,
                      "ApplicationRequests4xx": 60,
                      "ApplicationRequests5xx": 60,
                      "ApplicationRequestsTotal": 60,
                      "InstancesDegraded": 60,
                      "InstancesInfo": 60,
                      "InstancesNoData": 60,
                      "InstancesOk": 60,
                      "InstancesPending": 60,
                      "InstancesSevere": 60,
                      "InstancesUnknown": 60,
                      "InstancesWarning": 60
                    }
                  },
                  "Rules": {
                    "Environment": {
                      "Application": {
                        "ApplicationRequests4xx": {
                          "Enabled": false
                        }
                      }
                    }
                  }
                }'

      # Elastic Beanstalk Options, VPC

      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value: !Ref VpcId

      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        # Workaround: List<> is not supported, generate a comma-separated String instead
        Value:
          "Fn::Join":
            - ','
            - - !If [SingleAz, !Select [ 0, !Ref PrivateSubnetIds ], !Ref 'AWS::NoValue']
              - !If [DoubleAz, !Select [ 1, !Ref PrivateSubnetIds ], !Ref 'AWS::NoValue']
              - !If [TripleAz, !Select [ 2, !Ref PrivateSubnetIds ], !Ref 'AWS::NoValue']

      - Namespace: aws:ec2:vpc
        OptionName: ELBSubnets
        # Workaround: List<> is not supported, generate a comma-separated String instead
        Value:
          "Fn::Join":
            - ','
            - - !If [SingleAz, !Select [ 0, !Ref PublicSubnetIds ], !Ref 'AWS::NoValue']
              - !If [DoubleAz, !Select [ 1, !Ref PublicSubnetIds ], !Ref 'AWS::NoValue']
              - !If [TripleAz, !Select [ 2, !Ref PublicSubnetIds ], !Ref 'AWS::NoValue']

      - Namespace: aws:elbv2:listener:default
        OptionName: ListenerEnabled
        Value: "true"

      - Namespace: aws:elbv2:loadbalancer
        OptionName: SecurityGroups
        Value: !Ref LoadBalancerSecurityGroup

      - Namespace: aws:elbv2:loadbalancer
        OptionName: ManagedSecurityGroup
        Value: !Ref LoadBalancerSecurityGroup

      - Namespace: aws:elbv2:listenerrule:default
        OptionName: PathPatterns
        Value: "/*"

      # Elastic Beanstalk Options, CloudWatch Logs

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: StreamLogs
        Value: "true"

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: DeleteOnTerminate
        Value: "true"

      # Elastic Beanstalk Options, Environment Variables

      # - Namespace: aws:elasticbeanstalk:application:environment
      #   OptionName: EXAMPLE
      #   Value: 'example'

Outputs:

  Name:
    Description: Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}:Name

  Region:
    Description: Region Name
    Value: !Ref AWS::Region
    Export:
      Name: !Sub ${AWS::StackName}:Region

  EbApplicationName:
    Description: Elastic Beanstalk Application URL
    Value: !Ref EbApplication
    Export:
      Name: !Sub "${AWS::StackName}:EbApplicationName"

  EbEnvironmentName:
    Description: Elastic Beanstalk Environment URL
    Value: !Ref EbEnvironment
    Export:
      Name: !Sub "${AWS::StackName}:EbEnvironmentName"

  EbEnvironmentUrl:
    Description: Elastic Beanstalk Environment URL
    Value: !GetAtt EbEnvironment.EndpointURL
    Export:
      Name: !Sub "${AWS::StackName}:EbEnvironmentUrl"

  LoadBalancerSecurityGroupId:
    Description: Security Group ID applied to Internet-facing Load Balancer
    Value: !GetAtt LoadBalancerSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}:LoadBalancerSecurityGroupId"

  TargetSecurityGroupId:
    Description: Security Group ID applied to Targets of the Load Balancer
    Value: !GetAtt TargetSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}:TargetSecurityGroupId"

  ElasticBeanstalkPlatform:
    Description: Elastic Beanstalk Platform ("Solution Stack Name")
    Value: !Ref ElasticBeanstalkPlatform
    Export:
      Name: !Sub "${AWS::StackName}:ElasticBeanstalkPlatform"
